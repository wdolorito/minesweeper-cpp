eOS/Ubuntu bionic:
  install gtk3 dev e.g. `apt install libgtk-3-dev` <== for eOS/Ubuntu

Arch Linux Arm:
  Samsung arm chromebook, install armv7:
    https://archlinuxarm.org/platforms/armv7/samsung/samsung-chromebook
  install plasma-meta
  install konsole
  install base-devel
  install gtk3
  install exfat-utils (for fuse, not really needed if don't use exfat)
    alternatively fuse-common and fuse2
  install llvm
  install clang
  add --with-gtk=3 to configure

  `pacman -S plasma-meta konsole base-devel gtk3 exfat-utils llvm clang`


Lib 3.0.3:
CC=clang CXX=clang++ ../wxWidgets-3.0.3/configure --enable-stl --prefix=$HOME/local
make BUILD=debug

Building project:
PATH=$HOME/local/bin:$PATH make

Running project:
LD_LIBRARY_PATH=$HOME/local/bin GTK_CSD=0 ./bin/minesweeper*
                                ^^^^^^^^^
                             needed for eOS

For distribution agnostic packaging:
  https://docs.appimage.org/index.html

linux container setup:
  lxc-create -t download -n llvm-compiler-amd64 -- -d ubuntu -r bionic -a amd64
    using ubuntu bionic because ssp thrown with AppImage generated by debian buster container

  edit ~/.local/share/lxc/llvm-compiler-amd64/config
    add lxc.mount.entry = /dev/fuse dev/fuse none bind,create=file,rw,uid=xxxx,gid=xxxx 0 0

  lxc-start -n llvm-compiler-amd64
  lxc-attach -n llvm-compiler-amd64
  su -
  apt install nano less patch make clang lld libwxgtk3.0-dev libfuse2 pkgconf libgdk-pixbuf2.0-dev libgtk-3-dev

  lxc-create -t download -n llvm-compiler-i686 -- -d ubuntu -r bionic -a i386
  ~/.local/share/lxc/llvm-compiler-i686/config
    lxc.mount.entry = /dev/fuse dev/fuse none bind,create=file,rw,uid=xxxx,gid=xxxx 0 0
  to run binary on host:
    apt install libfuse2:i386
    apt install librsvg2-2:i386


ARMHF container (broken):

armhf ubuntu bionic linux container does not compile project, because networking does not work to install
  new packages;  look for armhf binary debs from website

  lxc-create -t download -n llvm-compiler-armhf -- -d ubuntu -r bionic -a armhf
  ~/.local/share/lxc/llvm-compiler-armhf/config
    lxc.mount.entry = /dev/fuse dev/fuse none bind,create=file,rw,uid=xxxx,gid=xxxx 0 0
  sudo cp /usr/bin/qemu-arm-static ~/.local/share/lxc/llvm-compiler-armhf/rootfs/usr/bin
  sudo chown xxxx:xxxx ~/.local/share/lxc/llvm-compiler-armhf/rootfs/usr/bin/qemu-arm-static

  Wasted some time searching through a package archive.
<<<<<<< HEAD
  on new armhf ubuntu container, run:
    apt -y install --print-uris nano less patch make clang lld libwxgtk3.0-dev libfuse2 pkgconf libgdk-pixbuf2.0-dev libgtk-3-dev > all\ debs
    cp all\ debs /tmp

    on host,
      cat all\ debs | grep 'MD5' | tr -d \' | awk '{print$1}' > just\ debs
      sed "s/_amd64/_armhf/g" just\ debs > armhf\ debs\ raw
      sed "s/archive\.ubuntu\.com\/ubuntu/ports\.ubuntu\.com/g" armhf\ debs\ raw > armhf\ debs
      wget -i armhf\ debs
      cp debs to container
      dpkg -i *.deb
=======
    on new armhf ubuntu container, run:
      apt -y install --print-uris nano less patch make clang lld libwxgtk3.0-dev libfuse2 pkgconf libgdk-pixbuf2.0-dev libgtk-3-dev > all\ debs
      cp all\ debs /tmp
      on host,lxc.mount.entry = /dev/fuse dev/fuse none bind,create=file,rw,uid=xxxx,gid=xxxx 0 0
        cat all\ debs | grep 'MD5' | tr -d \' | awk '{print$1}' > just\ debs
        then sed "s/_amd64/_armhf/g" just\ debs > armhf\ debs\ raw
        sed "s/archive\.ubuntu.com\/ubuntu/ports.ubuntu.com/g" armhf\ debs\ raw > armhf\ debs
        should be able to wget -i armhf\ debs
>>>>>>> ab5aa5ee7c81fb1e150360443f308e768d29bbe9
